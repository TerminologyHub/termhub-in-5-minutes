/*
 * Terminology Hub Terminology Terminology API
 * API documentation for the interacting with terminologies and concepts. <p>For a guided tour of using this API, see our github project <a target=\"_blank\" href=\"https://github.com/terminologyhub/termhub-in-5-minutes\">https://github.com/terminologyhub/termhub-in-5-minutes</a></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@terminologyhub.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import api.invoker.JSON;


/**
 * Represents enough information to uniquely reference a concept in a terminology
 */
@JsonPropertyOrder({
  ConceptRef.JSON_PROPERTY_ID,
  ConceptRef.JSON_PROPERTY_CONFIDENCE,
  ConceptRef.JSON_PROPERTY_MODIFIED,
  ConceptRef.JSON_PROPERTY_CREATED,
  ConceptRef.JSON_PROPERTY_MODIFIED_BY,
  ConceptRef.JSON_PROPERTY_LOCAL,
  ConceptRef.JSON_PROPERTY_ACTIVE,
  ConceptRef.JSON_PROPERTY_NAME,
  ConceptRef.JSON_PROPERTY_CODE,
  ConceptRef.JSON_PROPERTY_TERMINOLOGY,
  ConceptRef.JSON_PROPERTY_VERSION,
  ConceptRef.JSON_PROPERTY_PUBLISHER,
  ConceptRef.JSON_PROPERTY_HISTORICAL,
  ConceptRef.JSON_PROPERTY_LEAF,
  ConceptRef.JSON_PROPERTY_DEFINED,
  ConceptRef.JSON_PROPERTY_LEVEL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-03T12:36:52.969136900-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class ConceptRef {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_CONFIDENCE = "confidence";
  private Double confidence;

  public static final String JSON_PROPERTY_MODIFIED = "modified";
  private OffsetDateTime modified;

  public static final String JSON_PROPERTY_CREATED = "created";
  private OffsetDateTime created;

  public static final String JSON_PROPERTY_MODIFIED_BY = "modifiedBy";
  private String modifiedBy;

  public static final String JSON_PROPERTY_LOCAL = "local";
  private Boolean local;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_TERMINOLOGY = "terminology";
  private String terminology;

  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public static final String JSON_PROPERTY_PUBLISHER = "publisher";
  private String publisher;

  public static final String JSON_PROPERTY_HISTORICAL = "historical";
  private String historical;

  public static final String JSON_PROPERTY_LEAF = "leaf";
  private Boolean leaf;

  public static final String JSON_PROPERTY_DEFINED = "defined";
  private Boolean defined;

  public static final String JSON_PROPERTY_LEVEL = "level";
  private Integer level;

  public ConceptRef() { 
  }

  public ConceptRef id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Unique identifier
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(UUID id) {
    this.id = id;
  }


  public ConceptRef confidence(Double confidence) {
    this.confidence = confidence;
    return this;
  }

   /**
   * Confidence value (for use with search results)
   * @return confidence
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONFIDENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getConfidence() {
    return confidence;
  }


  @JsonProperty(JSON_PROPERTY_CONFIDENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfidence(Double confidence) {
    this.confidence = confidence;
  }


  public ConceptRef modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * Last modified date
   * @return modified
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getModified() {
    return modified;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public ConceptRef created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * Created date
   * @return created
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ConceptRef modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * Last modified by
   * @return modifiedBy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModifiedBy() {
    return modifiedBy;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public ConceptRef local(Boolean local) {
    this.local = local;
    return this;
  }

   /**
   * Indicates whether this data element is locally created
   * @return local
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLocal() {
    return local;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocal(Boolean local) {
    this.local = local;
  }


  public ConceptRef active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Indicates whether or not the component is active
   * @return active
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public ConceptRef name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Concept name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public ConceptRef code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Terminology code, typically representing a unit of meaning
   * @return code
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCode(String code) {
    this.code = code;
  }


  public ConceptRef terminology(String terminology) {
    this.terminology = terminology;
    return this;
  }

   /**
   * Terminology abbreviation
   * @return terminology
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTerminology() {
    return terminology;
  }


  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminology(String terminology) {
    this.terminology = terminology;
  }


  public ConceptRef version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Terminology version
   * @return version
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(String version) {
    this.version = version;
  }


  public ConceptRef publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

   /**
   * Terminology publisher
   * @return publisher
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLISHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPublisher() {
    return publisher;
  }


  @JsonProperty(JSON_PROPERTY_PUBLISHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public ConceptRef historical(String historical) {
    this.historical = historical;
    return this;
  }

   /**
   * Historical relationship type (only used for concept descendants)
   * @return historical
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HISTORICAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHistorical() {
    return historical;
  }


  @JsonProperty(JSON_PROPERTY_HISTORICAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHistorical(String historical) {
    this.historical = historical;
  }


  public ConceptRef leaf(Boolean leaf) {
    this.leaf = leaf;
    return this;
  }

   /**
   * Indicates whether or not this concept is a leaf node in its hierarchy
   * @return leaf
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LEAF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLeaf() {
    return leaf;
  }


  @JsonProperty(JSON_PROPERTY_LEAF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLeaf(Boolean leaf) {
    this.leaf = leaf;
  }


  public ConceptRef defined(Boolean defined) {
    this.defined = defined;
    return this;
  }

   /**
   * Indicates whether or not this concept has a logical definition with necessary and sufficient conditions
   * @return defined
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFINED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDefined() {
    return defined;
  }


  @JsonProperty(JSON_PROPERTY_DEFINED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefined(Boolean defined) {
    this.defined = defined;
  }


  public ConceptRef level(Integer level) {
    this.level = level;
    return this;
  }

   /**
   * Level of depth
   * @return level
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLevel() {
    return level;
  }


  @JsonProperty(JSON_PROPERTY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLevel(Integer level) {
    this.level = level;
  }


  /**
   * Return true if this ConceptRef object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConceptRef conceptRef = (ConceptRef) o;
    return Objects.equals(this.id, conceptRef.id) &&
        Objects.equals(this.confidence, conceptRef.confidence) &&
        Objects.equals(this.modified, conceptRef.modified) &&
        Objects.equals(this.created, conceptRef.created) &&
        Objects.equals(this.modifiedBy, conceptRef.modifiedBy) &&
        Objects.equals(this.local, conceptRef.local) &&
        Objects.equals(this.active, conceptRef.active) &&
        Objects.equals(this.name, conceptRef.name) &&
        Objects.equals(this.code, conceptRef.code) &&
        Objects.equals(this.terminology, conceptRef.terminology) &&
        Objects.equals(this.version, conceptRef.version) &&
        Objects.equals(this.publisher, conceptRef.publisher) &&
        Objects.equals(this.historical, conceptRef.historical) &&
        Objects.equals(this.leaf, conceptRef.leaf) &&
        Objects.equals(this.defined, conceptRef.defined) &&
        Objects.equals(this.level, conceptRef.level);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, confidence, modified, created, modifiedBy, local, active, name, code, terminology, version, publisher, historical, leaf, defined, level);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConceptRef {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    historical: ").append(toIndentedString(historical)).append("\n");
    sb.append("    leaf: ").append(toIndentedString(leaf)).append("\n");
    sb.append("    defined: ").append(toIndentedString(defined)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

