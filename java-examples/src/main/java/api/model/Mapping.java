/*
 * Terminology Hub Terminology Terminology API
 * API documentation for the interacting with terminologies and concepts. <p>For a guided tour of using this API, see our github project <a target=\"_blank\" href=\"https://github.com/terminologyhub/termhub-in-5-minutes\">https://github.com/terminologyhub/termhub-in-5-minutes</a></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@terminologyhub.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import api.model.ConceptRef;
import api.model.MapsetRef;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import api.invoker.JSON;


/**
 * Represents a mapping between a code in one terminology and code in another terminology
 */
@JsonPropertyOrder({
  Mapping.JSON_PROPERTY_ID,
  Mapping.JSON_PROPERTY_CONFIDENCE,
  Mapping.JSON_PROPERTY_MODIFIED,
  Mapping.JSON_PROPERTY_CREATED,
  Mapping.JSON_PROPERTY_MODIFIED_BY,
  Mapping.JSON_PROPERTY_LOCAL,
  Mapping.JSON_PROPERTY_ACTIVE,
  Mapping.JSON_PROPERTY_TERMINOLOGY,
  Mapping.JSON_PROPERTY_VERSION,
  Mapping.JSON_PROPERTY_PUBLISHER,
  Mapping.JSON_PROPERTY_COMPONENT_ID,
  Mapping.JSON_PROPERTY_MAPSET,
  Mapping.JSON_PROPERTY_FROM,
  Mapping.JSON_PROPERTY_TO,
  Mapping.JSON_PROPERTY_GROUP,
  Mapping.JSON_PROPERTY_PRIORITY,
  Mapping.JSON_PROPERTY_RULE,
  Mapping.JSON_PROPERTY_ADVICE,
  Mapping.JSON_PROPERTY_TYPE,
  Mapping.JSON_PROPERTY_ATTRIBUTES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-04T13:11:42.646293800-07:00[America/Los_Angeles]", comments = "Generator version: 7.5.0")
public class Mapping {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_CONFIDENCE = "confidence";
  private Double confidence;

  public static final String JSON_PROPERTY_MODIFIED = "modified";
  private OffsetDateTime modified;

  public static final String JSON_PROPERTY_CREATED = "created";
  private OffsetDateTime created;

  public static final String JSON_PROPERTY_MODIFIED_BY = "modifiedBy";
  private String modifiedBy;

  public static final String JSON_PROPERTY_LOCAL = "local";
  private Boolean local;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_TERMINOLOGY = "terminology";
  private String terminology;

  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public static final String JSON_PROPERTY_PUBLISHER = "publisher";
  private String publisher;

  public static final String JSON_PROPERTY_COMPONENT_ID = "componentId";
  private String componentId;

  public static final String JSON_PROPERTY_MAPSET = "mapset";
  private MapsetRef mapset;

  public static final String JSON_PROPERTY_FROM = "from";
  private ConceptRef from;

  public static final String JSON_PROPERTY_TO = "to";
  private ConceptRef to;

  public static final String JSON_PROPERTY_GROUP = "group";
  private String group;

  public static final String JSON_PROPERTY_PRIORITY = "priority";
  private String priority;

  public static final String JSON_PROPERTY_RULE = "rule";
  private String rule;

  public static final String JSON_PROPERTY_ADVICE = "advice";
  private List<String> advice = new ArrayList<>();

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  private Map<String, String> attributes = new HashMap<>();

  public Mapping() { 
  }

  public Mapping id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Unique identifier
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(UUID id) {
    this.id = id;
  }


  public Mapping confidence(Double confidence) {
    this.confidence = confidence;
    return this;
  }

   /**
   * Confidence value (for use with search results)
   * @return confidence
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONFIDENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getConfidence() {
    return confidence;
  }


  @JsonProperty(JSON_PROPERTY_CONFIDENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfidence(Double confidence) {
    this.confidence = confidence;
  }


  public Mapping modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * Last modified date
   * @return modified
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getModified() {
    return modified;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public Mapping created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * Created date
   * @return created
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Mapping modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

   /**
   * Last modified by
   * @return modifiedBy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModifiedBy() {
    return modifiedBy;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public Mapping local(Boolean local) {
    this.local = local;
    return this;
  }

   /**
   * Indicates whether this data element is locally created
   * @return local
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLocal() {
    return local;
  }


  @JsonProperty(JSON_PROPERTY_LOCAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocal(Boolean local) {
    this.local = local;
  }


  public Mapping active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Indicates whether or not the component is active
   * @return active
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public Mapping terminology(String terminology) {
    this.terminology = terminology;
    return this;
  }

   /**
   * Terminology abbreviation, e.g. \&quot;SNOMEDCT\&quot;
   * @return terminology
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTerminology() {
    return terminology;
  }


  @JsonProperty(JSON_PROPERTY_TERMINOLOGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminology(String terminology) {
    this.terminology = terminology;
  }


  public Mapping version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Terminology version, e.g. \&quot;20230901\&quot;
   * @return version
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(String version) {
    this.version = version;
  }


  public Mapping publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

   /**
   * Terminology publisher, e.g. \&quot;SNOMEDCT\&quot;
   * @return publisher
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLISHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPublisher() {
    return publisher;
  }


  @JsonProperty(JSON_PROPERTY_PUBLISHER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }


  public Mapping componentId(String componentId) {
    this.componentId = componentId;
    return this;
  }

   /**
   * Identifier for this object in the published source terminology
   * @return componentId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPONENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getComponentId() {
    return componentId;
  }


  @JsonProperty(JSON_PROPERTY_COMPONENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComponentId(String componentId) {
    this.componentId = componentId;
  }


  public Mapping mapset(MapsetRef mapset) {
    this.mapset = mapset;
    return this;
  }

   /**
   * Get mapset
   * @return mapset
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAPSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MapsetRef getMapset() {
    return mapset;
  }


  @JsonProperty(JSON_PROPERTY_MAPSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMapset(MapsetRef mapset) {
    this.mapset = mapset;
  }


  public Mapping from(ConceptRef from) {
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConceptRef getFrom() {
    return from;
  }


  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrom(ConceptRef from) {
    this.from = from;
  }


  public Mapping to(ConceptRef to) {
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConceptRef getTo() {
    return to;
  }


  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTo(ConceptRef to) {
    this.to = to;
  }


  public Mapping group(String group) {
    this.group = group;
    return this;
  }

   /**
   * Grouping mechanism for a set of maps
   * @return group
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGroup() {
    return group;
  }


  @JsonProperty(JSON_PROPERTY_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroup(String group) {
    this.group = group;
  }


  public Mapping priority(String priority) {
    this.priority = priority;
    return this;
  }

   /**
   * Priority indicator within a map group
   * @return priority
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRIORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPriority() {
    return priority;
  }


  @JsonProperty(JSON_PROPERTY_PRIORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPriority(String priority) {
    this.priority = priority;
  }


  public Mapping rule(String rule) {
    this.rule = rule;
    return this;
  }

   /**
   * Machine-readable rule for when the map should be applied
   * @return rule
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRule() {
    return rule;
  }


  @JsonProperty(JSON_PROPERTY_RULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRule(String rule) {
    this.rule = rule;
  }


  public Mapping advice(List<String> advice) {
    this.advice = advice;
    return this;
  }

  public Mapping addAdviceItem(String adviceItem) {
    if (this.advice == null) {
      this.advice = new ArrayList<>();
    }
    this.advice.add(adviceItem);
    return this;
  }

   /**
   * Human-readable advice for how to use the map
   * @return advice
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAdvice() {
    return advice;
  }


  @JsonProperty(JSON_PROPERTY_ADVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdvice(List<String> advice) {
    this.advice = advice;
  }


  public Mapping type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Type of mapping between the \&quot;from\&quot; and \&quot;to\&quot; concepts. Often this is something like \&quot;equivalent\&quot;, \&quot;broader\&quot;, or \&quot;narrower\&quot;
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public Mapping attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Mapping putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * Key/value pairs associated with this object
   * @return attributes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  /**
   * Return true if this Mapping object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Mapping mapping = (Mapping) o;
    return Objects.equals(this.id, mapping.id) &&
        Objects.equals(this.confidence, mapping.confidence) &&
        Objects.equals(this.modified, mapping.modified) &&
        Objects.equals(this.created, mapping.created) &&
        Objects.equals(this.modifiedBy, mapping.modifiedBy) &&
        Objects.equals(this.local, mapping.local) &&
        Objects.equals(this.active, mapping.active) &&
        Objects.equals(this.terminology, mapping.terminology) &&
        Objects.equals(this.version, mapping.version) &&
        Objects.equals(this.publisher, mapping.publisher) &&
        Objects.equals(this.componentId, mapping.componentId) &&
        Objects.equals(this.mapset, mapping.mapset) &&
        Objects.equals(this.from, mapping.from) &&
        Objects.equals(this.to, mapping.to) &&
        Objects.equals(this.group, mapping.group) &&
        Objects.equals(this.priority, mapping.priority) &&
        Objects.equals(this.rule, mapping.rule) &&
        Objects.equals(this.advice, mapping.advice) &&
        Objects.equals(this.type, mapping.type) &&
        Objects.equals(this.attributes, mapping.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, confidence, modified, created, modifiedBy, local, active, terminology, version, publisher, componentId, mapset, from, to, group, priority, rule, advice, type, attributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Mapping {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    componentId: ").append(toIndentedString(componentId)).append("\n");
    sb.append("    mapset: ").append(toIndentedString(mapset)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    advice: ").append(toIndentedString(advice)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

