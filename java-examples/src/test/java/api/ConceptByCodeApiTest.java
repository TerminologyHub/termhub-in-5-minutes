/*
 * Terminology Hub Terminology Terminology API
 * API documentation for the interacting with terminologies and concepts. <p>For a guided tour of using this API, see our github project <a target=\"_blank\" href=\"https://github.com/terminologyhub/termhub-in-5-minutes\">https://github.com/terminologyhub/termhub-in-5-minutes</a></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@terminologyhub.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import api.invoker.*;
import api.invoker.auth.*;
import api.model.Concept;
import api.model.Mapping;
import api.model.ResultListConceptRelationship;
import api.model.ResultListConceptTreePosition;
import api.model.AuthResponse;
import api.model.ResultListTerminology;
import api.model.Terminology;

import org.junit.jupiter.api.Assertions;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConceptByCodeApi
 */
public class ConceptByCodeApiTest {

    private final ConceptByCodeApi api = new ConceptByCodeApi();

    @BeforeEach
    public void setUp() {
        // Set up the API client with authentication
        String grantType = "username_password";
        String username = System.getProperty("username");
        String password = System.getProperty("password");
        String accessToken = null;
        try {
            AuthResponse response = new AuthApi().auth(grantType, username, password);
            accessToken = response.getAccessToken();
        } catch (Exception e) {
            e.printStackTrace();
            Assertions.fail("Failed to authenticate: " + e.getMessage());
        }
        api.getApiClient().setBearerToken(accessToken);

        
    }

    /**
     * Find concept inverse relationships by terminology and code
     *
     * Finds concept inverse relationships for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findConceptInverseRelationshipsTest() throws ApiException {
        //String idOrUriLabel = null;
        //String terminology = null;
        //String code = null;
        //String query = null;
        //Integer offset = null;
        //Integer limit = null;
        //Boolean ascending = null;
        //String sort = null;
        //ResultListConceptRelationship response = api.findConceptInverseRelationships(idOrUriLabel, terminology, code, query, offset, limit, ascending, sort);
        // TODO: test validations
    }

    /**
     * Find concept relationships by terminology and code
     *
     * Finds concept relationships for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findConceptRelationshipsTest() throws ApiException {
        //String idOrUriLabel = null;
        //String terminology = null;
        //String code = null;
        //String query = null;
        //Integer offset = null;
        //Integer limit = null;
        //Boolean ascending = null;
        //String sort = null;
        //ResultListConceptRelationship response = api.findConceptRelationships(idOrUriLabel, terminology, code, query, offset, limit, ascending, sort);
        // TODO: test validations
    }

    /**
     * Find concept tree position children by terminology and code
     *
     * Finds concept tree position children for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTreePositionChildrenTest() throws ApiException {
        //String idOrUriLabel = null;
        //String terminology = null;
        //String code = null;
        //String query = null;
        //Integer offset = null;
        //Integer limit = null;
        //Boolean ascending = null;
        //String sort = null;
        //ResultListConceptTreePosition response = api.findTreePositionChildren(idOrUriLabel, terminology, code, query, offset, limit, ascending, sort);
        // TODO: test validations
    }

    /**
     * Find concept tree positions by terminology and code
     *
     * Finds concept tree positions for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTreePositionsTest() throws ApiException {
        //String idOrUriLabel = null;
        //String terminology = null;
        //String code = null;
        //String query = null;
        //Integer offset = null;
        //Integer limit = null;
        //Boolean ascending = null;
        //String sort = null;
        //ResultListConceptTreePosition response = api.findTreePositions(idOrUriLabel, terminology, code, query, offset, limit, ascending, sort);
        // TODO: test validations
    }

    /**
     * Get minimal concept by terminology and code
     *
     * Gets concept for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMinimalConceptTest() throws ApiException {
        String idOrUriLabel = "sandbox";
        String terminology = "SNOMEDCT";
        String code = "73211009";
        String include = "minimal";
        Concept response = api.getConcept(idOrUriLabel, terminology, code, include);
        System.out.println("Response: " + response);
        assertNotNull(response);
        assertNotNull(response.getId());
        assertNotNull(response.getName());
        assertNotNull(response.getCode());
        assertEquals(code, response.getCode());
        assertNotNull(response.getTerminology());
        assertEquals(terminology, response.getTerminology());
    }

    /**
     * Get full concept by terminology and code
     *
     * Gets concept for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFullConceptTest() throws ApiException {
        String idOrUriLabel = "sandbox";
        String terminology = "SNOMEDCT";
        String code = "73211009";
        String include = "full";
        Concept response = api.getConcept(idOrUriLabel, terminology, code, include);
        System.out.println("Response: " + response);
        /*assertNotNull(response);
        assertNotNull(response.getId());
        assertNotNull(response.getName());
        assertNotNull(response.getCode());
        assertEquals(code, response.getCode());
        assertNotNull(response.getTerminology());
        assertEquals(terminology, response.getTerminology());*/
    }

    /**
     * Get concepts by terminology and list of codes
     *
     * Gets concepts for the specified terminology and list of codes. This call will not work for projects hosting multiple versions of the same terminology.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConceptCodesTest() throws ApiException {
        //String idOrUriLabel = null;
        //String terminology = null;
        //String codes = null;
        //String include = null;
        //List<Concept> response = api.getConceptCodes(idOrUriLabel, terminology, codes, include);
        // TODO: test validations
    }

    /**
     * Get concept diagram by terminology and code
     *
     * Gets concept diagram for the specified terminology and code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConceptDiagramTest() throws ApiException {
        //String idOrUriLabel = null;
        //String terminology = null;
        //String code = null;
        //api.getConceptDiagram(idOrUriLabel, terminology, code);
        // TODO: test validations
    }

    /**
     * Get mappings to concept by terminology and code
     *
     * Gets mappings tothe concept with the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConceptInverseMappingsTest() throws ApiException {
        //String idOrUriLabel = null;
        //String terminology = null;
        //String code = null;
        //List<Mapping> response = api.getConceptInverseMappings(idOrUriLabel, terminology, code);
        // TODO: test validations
    }

    /**
     * Get mappings from concept by terminology and code
     *
     * Gets mappings from the concept with the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConceptMappingsTest() throws ApiException {
        //String idOrUriLabel = null;
        //String terminology = null;
        //String code = null;
        //List<Mapping> response = api.getConceptMappings(idOrUriLabel, terminology, code);
        // TODO: test validations
    }

}
