/*
 * Terminology Hub Terminology Terminology API
 * API documentation for the interacting with terminologies and concepts. <p>For a guided tour of using this API, see our github project <a target=\"_blank\" href=\"https://github.com/terminologyhub/termhub-in-5-minutes\">https://github.com/terminologyhub/termhub-in-5-minutes</a></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@terminologyhub.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import api.invoker.*;
import api.invoker.auth.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import api.model.Mapset;
import api.model.ResultListMapping;
import api.model.ResultListMapset;
import api.model.AuthResponse;
import api.model.ResultListTerminology;
import api.model.Terminology;

import org.junit.jupiter.api.Assertions;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MapsetApi
 */
public class MapsetApiTest {

    private final MapsetApi api = new MapsetApi();

    @BeforeEach
    public void setUp() {
        // Set up the API client with authentication
        String grantType = "username_password";
        String username = System.getProperty("username");
        String password = System.getProperty("password");
        String accessToken = null;
        try {
            AuthResponse response = new AuthApi().auth(grantType, username, password);
            accessToken = response.getAccessToken();
        } catch (Exception e) {
            e.printStackTrace();
            Assertions.fail("Failed to authenticate: " + e.getMessage());
        }
        api.getApiClient().setBearerToken(accessToken);

        
    }

    /**
     * Export mapset
     *
     * Exports specified mapset in the specified format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportMapsetTest() throws ApiException {
        String idOrUriLabel = "sandbox";
        String mapset = "SNOMEDCT_US-ICD10CM";
        String format = "native";
        byte[] response = api.exportMapset(idOrUriLabel, mapset, format);
        assertNotNull(response);
        assertTrue(response.length > 0);
        // write the response to a file
        try {
            FileOutputStream fos = new FileOutputStream("SNOMEDCT_US-ICD10CM.zip");
            fos.write(response);
            fos.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            Assertions.fail("Failed to write file: " + e.getMessage());
        } catch (IOException e) {
            e.printStackTrace();
            Assertions.fail("Failed to write file: " + e.getMessage());
        }
        // Verify the file was created
        File file = new File("SNOMEDCT_US-ICD10CM.zip");
        assertTrue(file.exists(), "File should exist");
        assertTrue(file.length() > 0, "File should not be empty");
    }

    /**
     * Export mappings for project mapset
     *
     * Exports mapping matching specified search criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportMapsetMappingsTest() throws ApiException {
        //String idOrUriLabel = null;
        //String mapset = null;
        //String query = null;
        //Boolean active = null;
        //Boolean leaf = null;
        //File response = api.exportMapsetMappings(idOrUriLabel, mapset, query, active, leaf);
        // TODO: test validations
    }

    /**
     * Find mappings across project mapsets
     *
     * Finds mapping matching specified search criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findMappingsTest() throws ApiException {
        //String idOrUriLabel = null;
        //String mapset = null;
        //String query = null;
        //Integer offset = null;
        //Integer limit = null;
        //String sort = null;
        //Boolean ascending = null;
        //Boolean active = null;
        //Boolean leaf = null;
        //ResultListMapping response = api.findMappings(idOrUriLabel, mapset, query, offset, limit, sort, ascending, active, leaf);
        // TODO: test validations
    }

    /**
     * Find mappings for the specified mapset
     *
     * Finds mapping for the specified mapset and the specified search criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findMapsetMappingsTest() throws ApiException {
        //String idOrUriLabel = null;
        //String mapset = null;
        //String query = null;
        //Integer offset = null;
        //Integer limit = null;
        //String sort = null;
        //Boolean ascending = null;
        //Boolean active = null;
        //Boolean leaf = null;
        //ResultListMapping response = api.findMapsetMappings(idOrUriLabel, mapset, query, offset, limit, sort, ascending, active, leaf);
        // TODO: test validations
    }

    /**
     * Find mapsets
     *
     * Finds mapsets matching specified criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findMapsetsTest() throws ApiException {
        String query = null;
        Integer offset = null;
        Integer limit = null;
        String sort = null;
        Boolean ascending = null;
        ResultListMapset response = api.findMapsets(query, offset, limit, sort, ascending);
        assertNotNull(response);
        assertNotNull(response.getTotal());
        System.out.println("Response: " + response);
        assertTrue(response.getTotal() > 0);
        assertNotNull(response.getItems());
        assertFalse(response.getItems().isEmpty());
        for (Object item : response.getItems()) {
            assertTrue(item instanceof Mapset);
        }
    }

    /**
     * Get mapset by id
     *
     * Gets mapset for the specified id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMapsetTest() throws ApiException {
        String id = "2a545e12-04eb-48ee-b988-c17346b4e05f";
        Mapset response = api.getMapset(id);
        assertNotNull(response);
        System.out.println("Response: " + response);
        assertEquals(id, response.getId().toString());

    }

    /**
     * Get project mapsets
     *
     * Gets mapset objects used by the specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectMapsetsTest() throws ApiException {
        String idOrUriLabel = "sandbox";
        List<Mapset> response = api.getProjectMapsets(idOrUriLabel);
        assertNotNull(response);
        assertFalse(response.isEmpty());
        System.out.println("Response: " + response);
        for (Object item : response) {
            assertTrue(item instanceof Mapset);
            assertEquals("sandbox", ((Mapset) item).getPublisher().toLowerCase());
        }
    }

}
