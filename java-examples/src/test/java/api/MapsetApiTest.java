/*
 * Terminology Hub Terminology Terminology API
 * API documentation for the interacting with terminologies and concepts. <p>For a guided tour of using this API, see our github project <a target=\"_blank\" href=\"https://github.com/terminologyhub/termhub-in-5-minutes\">https://github.com/terminologyhub/termhub-in-5-minutes</a></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@terminologyhub.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import api.invoker.*;
import api.invoker.auth.*;
import java.io.File;
import api.model.Mapset;
import api.model.ResultListMapping;
import api.model.ResultListMapset;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MapsetApi
 */
public class MapsetApiTest {

    private final MapsetApi api = new MapsetApi();

    /**
     * Export mapset
     *
     * Exports specified mapset in the specified format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportMapsetTest() throws ApiException {
        //String idOrUriLabel = null;
        //String mapset = null;
        //String format = null;
        //byte[] response = api.exportMapset(idOrUriLabel, mapset, format);
        // TODO: test validations
    }

    /**
     * Export mappings for project mapset
     *
     * Exports mapping matching specified search criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportMapsetMappingsTest() throws ApiException {
        //String idOrUriLabel = null;
        //String mapset = null;
        //String query = null;
        //Boolean active = null;
        //Boolean leaf = null;
        //File response = api.exportMapsetMappings(idOrUriLabel, mapset, query, active, leaf);
        // TODO: test validations
    }

    /**
     * Find mappings across project mapsets
     *
     * Finds mapping matching specified search criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findMappingsTest() throws ApiException {
        //String idOrUriLabel = null;
        //String mapset = null;
        //String query = null;
        //Integer offset = null;
        //Integer limit = null;
        //String sort = null;
        //Boolean ascending = null;
        //Boolean active = null;
        //Boolean leaf = null;
        //ResultListMapping response = api.findMappings(idOrUriLabel, mapset, query, offset, limit, sort, ascending, active, leaf);
        // TODO: test validations
    }

    /**
     * Find mappings for the specified mapset
     *
     * Finds mapping for the specified mapset and the specified search criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findMapsetMappingsTest() throws ApiException {
        //String idOrUriLabel = null;
        //String mapset = null;
        //String query = null;
        //Integer offset = null;
        //Integer limit = null;
        //String sort = null;
        //Boolean ascending = null;
        //Boolean active = null;
        //Boolean leaf = null;
        //ResultListMapping response = api.findMapsetMappings(idOrUriLabel, mapset, query, offset, limit, sort, ascending, active, leaf);
        // TODO: test validations
    }

    /**
     * Find mapsets
     *
     * Finds mapsets matching specified criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findMapsetsTest() throws ApiException {
        //String query = null;
        //Integer offset = null;
        //Integer limit = null;
        //String sort = null;
        //Boolean ascending = null;
        //ResultListMapset response = api.findMapsets(query, offset, limit, sort, ascending);
        // TODO: test validations
    }

    /**
     * Get mapset by id
     *
     * Gets mapset for the specified id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMapsetTest() throws ApiException {
        //String id = null;
        //Mapset response = api.getMapset(id);
        // TODO: test validations
    }

    /**
     * Get project mapsets
     *
     * Gets mapset objects used by the specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectMapsetsTest() throws ApiException {
        //String idOrUriLabel = null;
        //List<Mapset> response = api.getProjectMapsets(idOrUriLabel);
        // TODO: test validations
    }

}
