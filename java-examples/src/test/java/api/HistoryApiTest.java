/*
 * Terminology Hub Terminology Terminology API
 * API documentation for the interacting with terminologies and concepts. <p>For a guided tour of using this API, see our github project <a target=\"_blank\" href=\"https://github.com/terminologyhub/termhub-in-5-minutes\">https://github.com/terminologyhub/termhub-in-5-minutes</a></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@terminologyhub.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import api.invoker.*;
import api.invoker.auth.*;
import api.model.ConceptRef;
import java.io.File;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HistoryApi
 */
public class HistoryApiTest {

    private final HistoryApi api = new HistoryApi();

    @BeforeEach
    public void setUp() {
        // Set up the API client with authentication
        String grantType = "username_password";
        String username = System.getProperty("username");
        String password = System.getProperty("password");
        String accessToken = null;
        try {
            AuthResponse response = new AuthApi().auth(grantType, username, password);
            accessToken = response.getAccessToken();
        } catch (Exception e) {
            e.printStackTrace();
            Assertions.fail("Failed to authenticate: " + e.getMessage());
        }
        api.getApiClient().setAccessToken(accessToken);
    }

    /**
     * Exports terminology concepts added since prior version
     *
     * Exports concept code/name/semanticType for concepts added in the terminology since the specified older version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportTerminologyHistoryNewConceptsTest() throws ApiException {
        //String id = null;
        //String priorVersion = null;
        //File response = api.exportTerminologyHistoryNewConcepts(id, priorVersion);
        // TODO: test validations
    }

    /**
     * Exports terminology concepts retired since prior version
     *
     * Exports concept code/name for concepts retired in the terminology since the specified prior version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportTerminologyHistoryRetiredConceptsTest() throws ApiException {
        //String id = null;
        //String priorVersion = null;
        //File response = api.exportTerminologyHistoryRetiredConcepts(id, priorVersion);
        // TODO: test validations
    }

    /**
     * Get terminology concepts added since prior version
     *
     * Gets concept code/name for new active concepts in the terminology since the specified prior version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTerminologyHistoryNewConceptsTest() throws ApiException {
        //String id = null;
        //String priorVersion = null;
        //List<ConceptRef> response = api.getTerminologyHistoryNewConcepts(id, priorVersion);
        // TODO: test validations
    }

    /**
     * Get terminology concepts retired since prior version
     *
     * Gets concept code/name/semanticType for concepts retired in the terminology since the specified prior version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTerminologyHistoryRetiredConceptsTest() throws ApiException {
        //String id = null;
        //String priorVersion = null;
        //List<ConceptRef> response = api.getTerminologyHistoryRetiredConcepts(id, priorVersion);
        // TODO: test validations
    }

}
