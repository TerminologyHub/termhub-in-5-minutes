/*
 * Terminology Hub Terminology Terminology API
 * API documentation for the interacting with terminologies and concepts. <p>For a guided tour of using this API, see our github project <a target=\"_blank\" href=\"https://github.com/terminologyhub/termhub-in-5-minutes\">https://github.com/terminologyhub/termhub-in-5-minutes</a></p>
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@terminologyhub.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import api.invoker.*;
import api.invoker.auth.*;
import api.model.AuthResponse;
import api.model.ResultListTerm;
import api.model.ResultListTerminology;
import api.model.Term;
import api.model.Terminology;

import org.junit.jupiter.api.Assertions;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TermApi
 */
public class TermApiTest {

    private final TermApi api = new TermApi();

    @BeforeEach
    public void setUp() {
        // Set up the API client with authentication
        String grantType = "username_password";
        String username = System.getProperty("username");
        String password = System.getProperty("password");
        String accessToken = null;
        try {
            AuthResponse response = new AuthApi().auth(grantType, username, password);
            accessToken = response.getAccessToken();
        } catch (Exception e) {
            e.printStackTrace();
            Assertions.fail("Failed to authenticate: " + e.getMessage());
        }
        api.getApiClient().setBearerToken(accessToken);

        
    }

    /**
     * Suggest autocompletions for text while searching
     *
     * Finds top ten strings matching input query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void autocompleteTest() throws ApiException {
        String idOrUriLabel = "sandbox";
        String query = "diab";
        String terminology = "SNOMEDCT";
        Integer limit = 10;
        List<String> response = api.autocomplete(idOrUriLabel, query, terminology, limit);
        assertNotNull(response);
        assertFalse(response.isEmpty());
        System.out.println("Response: " + response);
        for (String suggestion : response) {
          assertTrue(suggestion.toLowerCase().contains(query.toLowerCase()), "Suggestion does not contain expected query: " + query);
        }
    }

    /**
     * Find terms across project terminologies
     *
     * Finds terms matching specified search criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTermsTest() throws ApiException {
        String idOrUriLabel = "sandbox";
        String terminology = "SNOMEDCT";
        String query = "diabetes";
        Integer offset = null;
        Integer limit = 5;
        String sort = null;
        Boolean ascending = null;
        Boolean active = null;
        ResultListTerm response = api.findTerms(idOrUriLabel, terminology, query, offset, limit, sort, ascending, active);
        assertNotNull(response);
        assertFalse(response.getItems().isEmpty());
        System.out.println("Response: " + response);
        for (Term term : response.getItems()) {
          assertTrue(term.getName().toLowerCase().contains(query), "Term name does not contain expected query: " + query);
        }
        
    }

}
