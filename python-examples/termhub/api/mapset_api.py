# coding: utf-8

"""
    Terminology Hub Terminology Terminology API

    API documentation for the interacting with terminologies and concepts. <p>For a guided tour of using this API, see our github project <a href=\"https://github.com/terminologyhub/termhub-in-5-minutes\">https://github.com/terminologyhub/termhub-in-5-minutes</a></p>

    The version of the OpenAPI document: 1.0.0
    Contact: info@terminologyhub.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from termhub.models.mapset import Mapset
from termhub.models.result_list_mapping import ResultListMapping
from termhub.models.result_list_mapset import ResultListMapset

from termhub.api_client import ApiClient, RequestSerialized
from termhub.api_response import ApiResponse
from termhub.rest import RESTResponseType


class MapsetApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def export_mapset(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
        mapset: Annotated[StrictStr, Field(description="Mapset id or abbreviation e.g. \"uuid1\" or \"CVX-NDC\".")],
        format: Annotated[StrictStr, Field(description="Requested download format, e.g. \"native\"")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Export mapset

        Exports specified mapset in the specified format.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param mapset: Mapset id or abbreviation e.g. \"uuid1\" or \"CVX-NDC\". (required)
        :type mapset: str
        :param format: Requested download format, e.g. \"native\" (required)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_mapset_serialize(
            id_or_uri_label=id_or_uri_label,
            mapset=mapset,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': None,
            '500': None,
            '200': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def export_mapset_with_http_info(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
        mapset: Annotated[StrictStr, Field(description="Mapset id or abbreviation e.g. \"uuid1\" or \"CVX-NDC\".")],
        format: Annotated[StrictStr, Field(description="Requested download format, e.g. \"native\"")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Export mapset

        Exports specified mapset in the specified format.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param mapset: Mapset id or abbreviation e.g. \"uuid1\" or \"CVX-NDC\". (required)
        :type mapset: str
        :param format: Requested download format, e.g. \"native\" (required)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_mapset_serialize(
            id_or_uri_label=id_or_uri_label,
            mapset=mapset,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': None,
            '500': None,
            '200': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def export_mapset_without_preload_content(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
        mapset: Annotated[StrictStr, Field(description="Mapset id or abbreviation e.g. \"uuid1\" or \"CVX-NDC\".")],
        format: Annotated[StrictStr, Field(description="Requested download format, e.g. \"native\"")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Export mapset

        Exports specified mapset in the specified format.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param mapset: Mapset id or abbreviation e.g. \"uuid1\" or \"CVX-NDC\". (required)
        :type mapset: str
        :param format: Requested download format, e.g. \"native\" (required)
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._export_mapset_serialize(
            id_or_uri_label=id_or_uri_label,
            mapset=mapset,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': None,
            '500': None,
            '200': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _export_mapset_serialize(
        self,
        id_or_uri_label,
        mapset,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_or_uri_label is not None:
            _path_params['idOrUriLabel'] = id_or_uri_label
        if mapset is not None:
            _path_params['mapset'] = mapset
        # process the query parameters
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/zip'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/{idOrUriLabel}/mapset/{mapset}/export',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_mappings(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel")],
        query: Annotated[Optional[StrictStr], Field(description="Search text")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
        ascending: Annotated[Optional[StrictBool], Field(description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
        active: Annotated[Optional[StrictBool], Field(description="<code>true</code> for active mappings only, <code>false</code> for inactive mappings only, <code>null</code> for both")] = None,
        leaf: Annotated[Optional[StrictBool], Field(description="<code>true</code> for leaf nodes only, <code>false</code> for non-leaf nodes, <code>null</code> for either")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResultListMapping:
        """Find mappings across project mapsets

        Finds mapping matching specified search criteria.

        :param id_or_uri_label: Project id or uriLabel (required)
        :type id_or_uri_label: str
        :param query: Search text
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param active: <code>true</code> for active mappings only, <code>false</code> for inactive mappings only, <code>null</code> for both
        :type active: bool
        :param leaf: <code>true</code> for leaf nodes only, <code>false</code> for non-leaf nodes, <code>null</code> for either
        :type leaf: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_mappings_serialize(
            id_or_uri_label=id_or_uri_label,
            query=query,
            offset=offset,
            limit=limit,
            sort=sort,
            ascending=ascending,
            active=active,
            leaf=leaf,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '417': None,
            '401': None,
            '200': "ResultListMapping",
            '500': None,
            '404': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_mappings_with_http_info(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel")],
        query: Annotated[Optional[StrictStr], Field(description="Search text")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
        ascending: Annotated[Optional[StrictBool], Field(description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
        active: Annotated[Optional[StrictBool], Field(description="<code>true</code> for active mappings only, <code>false</code> for inactive mappings only, <code>null</code> for both")] = None,
        leaf: Annotated[Optional[StrictBool], Field(description="<code>true</code> for leaf nodes only, <code>false</code> for non-leaf nodes, <code>null</code> for either")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResultListMapping]:
        """Find mappings across project mapsets

        Finds mapping matching specified search criteria.

        :param id_or_uri_label: Project id or uriLabel (required)
        :type id_or_uri_label: str
        :param query: Search text
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param active: <code>true</code> for active mappings only, <code>false</code> for inactive mappings only, <code>null</code> for both
        :type active: bool
        :param leaf: <code>true</code> for leaf nodes only, <code>false</code> for non-leaf nodes, <code>null</code> for either
        :type leaf: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_mappings_serialize(
            id_or_uri_label=id_or_uri_label,
            query=query,
            offset=offset,
            limit=limit,
            sort=sort,
            ascending=ascending,
            active=active,
            leaf=leaf,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '417': None,
            '401': None,
            '200': "ResultListMapping",
            '500': None,
            '404': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_mappings_without_preload_content(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel")],
        query: Annotated[Optional[StrictStr], Field(description="Search text")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
        ascending: Annotated[Optional[StrictBool], Field(description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
        active: Annotated[Optional[StrictBool], Field(description="<code>true</code> for active mappings only, <code>false</code> for inactive mappings only, <code>null</code> for both")] = None,
        leaf: Annotated[Optional[StrictBool], Field(description="<code>true</code> for leaf nodes only, <code>false</code> for non-leaf nodes, <code>null</code> for either")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find mappings across project mapsets

        Finds mapping matching specified search criteria.

        :param id_or_uri_label: Project id or uriLabel (required)
        :type id_or_uri_label: str
        :param query: Search text
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param active: <code>true</code> for active mappings only, <code>false</code> for inactive mappings only, <code>null</code> for both
        :type active: bool
        :param leaf: <code>true</code> for leaf nodes only, <code>false</code> for non-leaf nodes, <code>null</code> for either
        :type leaf: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_mappings_serialize(
            id_or_uri_label=id_or_uri_label,
            query=query,
            offset=offset,
            limit=limit,
            sort=sort,
            ascending=ascending,
            active=active,
            leaf=leaf,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '417': None,
            '401': None,
            '200': "ResultListMapping",
            '500': None,
            '404': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_mappings_serialize(
        self,
        id_or_uri_label,
        query,
        offset,
        limit,
        sort,
        ascending,
        active,
        leaf,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_or_uri_label is not None:
            _path_params['idOrUriLabel'] = id_or_uri_label
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if ascending is not None:
            
            _query_params.append(('ascending', ascending))
            
        if active is not None:
            
            _query_params.append(('active', active))
            
        if leaf is not None:
            
            _query_params.append(('leaf', leaf))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/{idOrUriLabel}/mapping',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_mapset_mappings(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel")],
        mapset: Annotated[StrictStr, Field(description="Mapset id or abbreviation e.g. \"uuid1\" or \"CVX-NDC\".")],
        query: Annotated[Optional[StrictStr], Field(description="Search text")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
        ascending: Annotated[Optional[StrictBool], Field(description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
        active: Annotated[Optional[StrictBool], Field(description="<code>true</code> for active mappings only, <code>false</code> for inactive mappings only, <code>null</code> for both")] = None,
        leaf: Annotated[Optional[StrictBool], Field(description="<code>true</code> for leaf nodes only, <code>false</code> for non-leaf nodes, <code>null</code> for either")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResultListMapping:
        """Find mappings for the specified mapset

        Finds mapping for the specified mapset and the specified search criteria.

        :param id_or_uri_label: Project id or uriLabel (required)
        :type id_or_uri_label: str
        :param mapset: Mapset id or abbreviation e.g. \"uuid1\" or \"CVX-NDC\". (required)
        :type mapset: str
        :param query: Search text
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param active: <code>true</code> for active mappings only, <code>false</code> for inactive mappings only, <code>null</code> for both
        :type active: bool
        :param leaf: <code>true</code> for leaf nodes only, <code>false</code> for non-leaf nodes, <code>null</code> for either
        :type leaf: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_mapset_mappings_serialize(
            id_or_uri_label=id_or_uri_label,
            mapset=mapset,
            query=query,
            offset=offset,
            limit=limit,
            sort=sort,
            ascending=ascending,
            active=active,
            leaf=leaf,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '417': None,
            '401': None,
            '200': "ResultListMapping",
            '500': None,
            '404': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_mapset_mappings_with_http_info(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel")],
        mapset: Annotated[StrictStr, Field(description="Mapset id or abbreviation e.g. \"uuid1\" or \"CVX-NDC\".")],
        query: Annotated[Optional[StrictStr], Field(description="Search text")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
        ascending: Annotated[Optional[StrictBool], Field(description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
        active: Annotated[Optional[StrictBool], Field(description="<code>true</code> for active mappings only, <code>false</code> for inactive mappings only, <code>null</code> for both")] = None,
        leaf: Annotated[Optional[StrictBool], Field(description="<code>true</code> for leaf nodes only, <code>false</code> for non-leaf nodes, <code>null</code> for either")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResultListMapping]:
        """Find mappings for the specified mapset

        Finds mapping for the specified mapset and the specified search criteria.

        :param id_or_uri_label: Project id or uriLabel (required)
        :type id_or_uri_label: str
        :param mapset: Mapset id or abbreviation e.g. \"uuid1\" or \"CVX-NDC\". (required)
        :type mapset: str
        :param query: Search text
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param active: <code>true</code> for active mappings only, <code>false</code> for inactive mappings only, <code>null</code> for both
        :type active: bool
        :param leaf: <code>true</code> for leaf nodes only, <code>false</code> for non-leaf nodes, <code>null</code> for either
        :type leaf: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_mapset_mappings_serialize(
            id_or_uri_label=id_or_uri_label,
            mapset=mapset,
            query=query,
            offset=offset,
            limit=limit,
            sort=sort,
            ascending=ascending,
            active=active,
            leaf=leaf,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '417': None,
            '401': None,
            '200': "ResultListMapping",
            '500': None,
            '404': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_mapset_mappings_without_preload_content(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel")],
        mapset: Annotated[StrictStr, Field(description="Mapset id or abbreviation e.g. \"uuid1\" or \"CVX-NDC\".")],
        query: Annotated[Optional[StrictStr], Field(description="Search text")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
        ascending: Annotated[Optional[StrictBool], Field(description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
        active: Annotated[Optional[StrictBool], Field(description="<code>true</code> for active mappings only, <code>false</code> for inactive mappings only, <code>null</code> for both")] = None,
        leaf: Annotated[Optional[StrictBool], Field(description="<code>true</code> for leaf nodes only, <code>false</code> for non-leaf nodes, <code>null</code> for either")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find mappings for the specified mapset

        Finds mapping for the specified mapset and the specified search criteria.

        :param id_or_uri_label: Project id or uriLabel (required)
        :type id_or_uri_label: str
        :param mapset: Mapset id or abbreviation e.g. \"uuid1\" or \"CVX-NDC\". (required)
        :type mapset: str
        :param query: Search text
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param active: <code>true</code> for active mappings only, <code>false</code> for inactive mappings only, <code>null</code> for both
        :type active: bool
        :param leaf: <code>true</code> for leaf nodes only, <code>false</code> for non-leaf nodes, <code>null</code> for either
        :type leaf: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_mapset_mappings_serialize(
            id_or_uri_label=id_or_uri_label,
            mapset=mapset,
            query=query,
            offset=offset,
            limit=limit,
            sort=sort,
            ascending=ascending,
            active=active,
            leaf=leaf,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '417': None,
            '401': None,
            '200': "ResultListMapping",
            '500': None,
            '404': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_mapset_mappings_serialize(
        self,
        id_or_uri_label,
        mapset,
        query,
        offset,
        limit,
        sort,
        ascending,
        active,
        leaf,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_or_uri_label is not None:
            _path_params['idOrUriLabel'] = id_or_uri_label
        if mapset is not None:
            _path_params['mapset'] = mapset
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if ascending is not None:
            
            _query_params.append(('ascending', ascending))
            
        if active is not None:
            
            _query_params.append(('active', active))
            
        if leaf is not None:
            
            _query_params.append(('leaf', leaf))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/{idOrUriLabel}/mapset/{mapset}/mappings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_mapsets(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Search text")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
        ascending: Annotated[Optional[StrictBool], Field(description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResultListMapset:
        """Find mapsets

        Finds mapsets matching specified criteria.

        :param query: Search text
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_mapsets_serialize(
            query=query,
            offset=offset,
            limit=limit,
            sort=sort,
            ascending=ascending,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '417': None,
            '401': None,
            '500': None,
            '200': "ResultListMapset",
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_mapsets_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Search text")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
        ascending: Annotated[Optional[StrictBool], Field(description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResultListMapset]:
        """Find mapsets

        Finds mapsets matching specified criteria.

        :param query: Search text
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_mapsets_serialize(
            query=query,
            offset=offset,
            limit=limit,
            sort=sort,
            ascending=ascending,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '417': None,
            '401': None,
            '500': None,
            '200': "ResultListMapset",
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_mapsets_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Search text")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
        ascending: Annotated[Optional[StrictBool], Field(description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find mapsets

        Finds mapsets matching specified criteria.

        :param query: Search text
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_mapsets_serialize(
            query=query,
            offset=offset,
            limit=limit,
            sort=sort,
            ascending=ascending,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '417': None,
            '401': None,
            '500': None,
            '200': "ResultListMapset",
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_mapsets_serialize(
        self,
        query,
        offset,
        limit,
        sort,
        ascending,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if ascending is not None:
            
            _query_params.append(('ascending', ascending))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/mapset',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_mapset(
        self,
        id: Annotated[StrictStr, Field(description="Mapset id, e.g. \"uuid\"")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Mapset:
        """Get mapset by id

        Gets mapset for the specified id

        :param id: Mapset id, e.g. \"uuid\" (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_mapset_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': None,
            '500': None,
            '200': "Mapset",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_mapset_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Mapset id, e.g. \"uuid\"")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Mapset]:
        """Get mapset by id

        Gets mapset for the specified id

        :param id: Mapset id, e.g. \"uuid\" (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_mapset_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': None,
            '500': None,
            '200': "Mapset",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_mapset_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Mapset id, e.g. \"uuid\"")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get mapset by id

        Gets mapset for the specified id

        :param id: Mapset id, e.g. \"uuid\" (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_mapset_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': None,
            '500': None,
            '200': "Mapset",
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_mapset_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/mapset/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_project_mapsets(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Mapset]:
        """Get project mapsets

        Gets mapset objects used by the specified project.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_mapsets_serialize(
            id_or_uri_label=id_or_uri_label,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Mapset]",
            '401': None,
            '500': None,
            '404': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_project_mapsets_with_http_info(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Mapset]]:
        """Get project mapsets

        Gets mapset objects used by the specified project.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_mapsets_serialize(
            id_or_uri_label=id_or_uri_label,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Mapset]",
            '401': None,
            '500': None,
            '404': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_project_mapsets_without_preload_content(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get project mapsets

        Gets mapset objects used by the specified project.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_project_mapsets_serialize(
            id_or_uri_label=id_or_uri_label,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Mapset]",
            '401': None,
            '500': None,
            '404': None,
            '403': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_project_mapsets_serialize(
        self,
        id_or_uri_label,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_or_uri_label is not None:
            _path_params['idOrUriLabel'] = id_or_uri_label
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/{idOrUriLabel}/mapset',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


