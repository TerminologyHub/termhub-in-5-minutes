# coding: utf-8

"""
    Terminology Hub Terminology Terminology API

    API documentation for the interacting with terminologies and concepts. <p>For a guided tour of using this API, see our github project <a href=\"https://github.com/terminologyhub/termhub-in-5-minutes\">https://github.com/terminologyhub/termhub-in-5-minutes</a></p>

    The version of the OpenAPI document: 1.0.0
    Contact: info@terminologyhub.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SearchParameters(BaseModel):
    """
    Represents parameters for a 'find' call.
    """ # noqa: E501
    terminology: Optional[StrictStr] = Field(default=None, description="Terminology filter, e.g. 'SNOMEDCT'")
    query: Optional[StrictStr] = Field(default=None, description="Search query, e.g. 'aspirin'")
    expression: Optional[StrictStr] = Field(default=None, description="Search expression, e.g. '<< 404684003'")
    filters: Optional[Dict[str, StrictStr]] = Field(default=None, description="Additional field level filters (to specify that certain fields must have certain values)")
    limit: Optional[StrictInt] = Field(default=None, description="Limit on number of results, e.g. 10")
    offset: Optional[StrictInt] = Field(default=None, description="Starting index for results, e.g. 0")
    active: Optional[StrictBool] = Field(default=None, description="Specifically search for 'active only' or 'inactive only'")
    sort: Optional[List[StrictStr]] = Field(default=None, description="Field of the data model being searched to sort by")
    ascending: Optional[StrictBool] = Field(default=None, description="Used with 'sort' to indicate ascending or descending")
    leaf: Optional[StrictBool] = Field(default=None, description="Specifically search for 'leaf only' or 'leaf only'")
    __properties: ClassVar[List[str]] = ["terminology", "query", "expression", "filters", "limit", "offset", "active", "sort", "ascending", "leaf"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "terminology": obj.get("terminology"),
            "query": obj.get("query"),
            "expression": obj.get("expression"),
            "filters": obj.get("filters"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "active": obj.get("active"),
            "sort": obj.get("sort"),
            "ascending": obj.get("ascending"),
            "leaf": obj.get("leaf")
        })
        return _obj


