# coding: utf-8

"""
    Terminology Hub Terminology Terminology API

    <div>API documentation for the interacting with terminologies and concepts. <hr width=\"100%\" /><p>For a guided tour of using this API, see our github project <a target=\"_blank\" href=\"https://github.com/terminologyhub/termhub-in-5-minutes\">https://github.com/terminologyhub/termhub-in-5-minutes</a></p><hr width=\"100%\" /><p>For a local runtime container version of this API, see github project <a href=\"https://github.com/terminologyhub/open-termhub\">https://github.com/terminologyhub/open-termhub</a></p><hr width=\"100%\" /><p>Watch the video documentation on the right for more info on using is API documentation page</p></div><div id=\"video-destination\"></div>

    The version of the OpenAPI document: 1.0.0
    Contact: info@terminologyhub.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SubsetRef(BaseModel):
    """
    Reference to the subset this member is part of
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier")
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Confidence value (for use with search results)")
    modified: Optional[datetime] = Field(default=None, description="Last modified date")
    created: Optional[datetime] = Field(default=None, description="Created date")
    modified_by: Optional[StrictStr] = Field(default=None, description="Last modified by", alias="modifiedBy")
    local: Optional[StrictBool] = Field(default=None, description="Indicates whether this data element is locally created")
    active: Optional[StrictBool] = Field(default=None, description="Indicates whether or not the component is active")
    abbreviation: Optional[StrictStr] = Field(default=None, description="Terminology abbreviation, e.g. \"SNOMEDCT\"")
    name: Optional[StrictStr] = None
    version: Optional[StrictStr] = Field(default=None, description="Terminology version, e.g. \"20230901\"")
    publisher: Optional[StrictStr] = Field(default=None, description="Terminology publisher, e.g. \"SNOMEDCT\"")
    release_date: Optional[StrictStr] = Field(default=None, description="YYYY-MM-DD rendering of the release date", alias="releaseDate")
    uri: Optional[StrictStr] = Field(default=None, description="Uri for downloading the terminology")
    latest: Optional[StrictBool] = Field(default=None, description="Indicates whether this is the latest version of the terminology")
    loaded: Optional[StrictBool] = Field(default=None, description="Indicates whether this is the version of the terminology is loaded")
    code: Optional[StrictStr] = Field(default=None, description="Subset code")
    from_publisher: Optional[StrictStr] = Field(default=None, description="Publisher that maps in this set are mapped from, e.g. \"SNOMEDCT\"", alias="fromPublisher")
    from_terminology: Optional[StrictStr] = Field(default=None, description="Terminology abbreviation that members in this set are from, e.g. \"SNOMEDCT\"", alias="fromTerminology")
    from_version: Optional[StrictStr] = Field(default=None, description="Terminology version that members in this set are from, e.g. \"20230901\"", alias="fromVersion")
    __properties: ClassVar[List[str]] = ["id", "confidence", "modified", "created", "modifiedBy", "local", "active", "abbreviation", "name", "version", "publisher", "releaseDate", "uri", "latest", "loaded", "code", "fromPublisher", "fromTerminology", "fromVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubsetRef from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubsetRef from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "confidence": obj.get("confidence"),
            "modified": obj.get("modified"),
            "created": obj.get("created"),
            "modifiedBy": obj.get("modifiedBy"),
            "local": obj.get("local"),
            "active": obj.get("active"),
            "abbreviation": obj.get("abbreviation"),
            "name": obj.get("name"),
            "version": obj.get("version"),
            "publisher": obj.get("publisher"),
            "releaseDate": obj.get("releaseDate"),
            "uri": obj.get("uri"),
            "latest": obj.get("latest"),
            "loaded": obj.get("loaded"),
            "code": obj.get("code"),
            "fromPublisher": obj.get("fromPublisher"),
            "fromTerminology": obj.get("fromTerminology"),
            "fromVersion": obj.get("fromVersion")
        })
        return _obj


