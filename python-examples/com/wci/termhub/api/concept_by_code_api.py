# coding: utf-8

"""
    Terminology Hub Terminology Terminology API

    API documentation for the interacting with terminologies and concepts. <p>For a guided tour of using this API, see our github project <a href=\"https://github.com/terminologyhub/termhub-in-5-minutes\">https://github.com/terminologyhub/termhub-in-5-minutes</a></p>

    The version of the OpenAPI document: 1.0.0
    Contact: info@terminologyhub.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from .models.concept import Concept
from .models.result_list_concept_relationship import ResultListConceptRelationship
from .models.result_list_concept_tree_position import ResultListConceptTreePosition

from api_client import ApiClient, RequestSerialized
from api_response import ApiResponse
from rest import RESTResponseType


class ConceptByCodeApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def find_concept_inverse_relationships(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            query: Annotated[Optional[StrictStr], Field(
                description="Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)")] = None,
            offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
            limit: Annotated[Optional[StrictInt], Field(
                description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
            ascending: Annotated[Optional[StrictBool], Field(
                description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
            sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResultListConceptRelationship:
        """Find concept inverse relationships by terminology and code

        Finds concept inverse relationships for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param query: Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._find_concept_inverse_relationships_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            query=query,
            offset=offset,
            limit=limit,
            ascending=ascending,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "ResultListConceptRelationship",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def find_concept_inverse_relationships_with_http_info(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            query: Annotated[Optional[StrictStr], Field(
                description="Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)")] = None,
            offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
            limit: Annotated[Optional[StrictInt], Field(
                description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
            ascending: Annotated[Optional[StrictBool], Field(
                description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
            sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResultListConceptRelationship]:
        """Find concept inverse relationships by terminology and code

        Finds concept inverse relationships for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param query: Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._find_concept_inverse_relationships_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            query=query,
            offset=offset,
            limit=limit,
            ascending=ascending,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "ResultListConceptRelationship",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def find_concept_inverse_relationships_without_preload_content(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            query: Annotated[Optional[StrictStr], Field(
                description="Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)")] = None,
            offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
            limit: Annotated[Optional[StrictInt], Field(
                description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
            ascending: Annotated[Optional[StrictBool], Field(
                description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
            sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find concept inverse relationships by terminology and code

        Finds concept inverse relationships for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param query: Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._find_concept_inverse_relationships_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            query=query,
            offset=offset,
            limit=limit,
            ascending=ascending,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "ResultListConceptRelationship",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _find_concept_inverse_relationships_serialize(
            self,
            id_or_uri_label,
            terminology,
            code,
            query,
            offset,
            limit,
            ascending,
            sort,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_or_uri_label is not None:
            _path_params['idOrUriLabel'] = id_or_uri_label
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        if query is not None:
            _query_params.append(('query', query))

        if offset is not None:
            _query_params.append(('offset', offset))

        if limit is not None:
            _query_params.append(('limit', limit))

        if ascending is not None:
            _query_params.append(('ascending', ascending))

        if sort is not None:
            _query_params.append(('sort', sort))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/{idOrUriLabel}/concept/{terminology}/{code}/inverseRelationships',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def find_concept_relationships(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            query: Annotated[Optional[StrictStr], Field(
                description="Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)")] = None,
            offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
            limit: Annotated[Optional[StrictInt], Field(
                description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
            ascending: Annotated[Optional[StrictBool], Field(
                description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
            sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResultListConceptRelationship:
        """Find concept relationships by terminology and code

        Finds concept relationships for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param query: Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._find_concept_relationships_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            query=query,
            offset=offset,
            limit=limit,
            ascending=ascending,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResultListConceptRelationship",
            '404': None,
            '401': None,
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def find_concept_relationships_with_http_info(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            query: Annotated[Optional[StrictStr], Field(
                description="Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)")] = None,
            offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
            limit: Annotated[Optional[StrictInt], Field(
                description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
            ascending: Annotated[Optional[StrictBool], Field(
                description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
            sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResultListConceptRelationship]:
        """Find concept relationships by terminology and code

        Finds concept relationships for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param query: Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._find_concept_relationships_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            query=query,
            offset=offset,
            limit=limit,
            ascending=ascending,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResultListConceptRelationship",
            '404': None,
            '401': None,
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def find_concept_relationships_without_preload_content(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            query: Annotated[Optional[StrictStr], Field(
                description="Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)")] = None,
            offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
            limit: Annotated[Optional[StrictInt], Field(
                description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
            ascending: Annotated[Optional[StrictBool], Field(
                description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
            sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find concept relationships by terminology and code

        Finds concept relationships for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param query: Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._find_concept_relationships_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            query=query,
            offset=offset,
            limit=limit,
            ascending=ascending,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResultListConceptRelationship",
            '404': None,
            '401': None,
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _find_concept_relationships_serialize(
            self,
            id_or_uri_label,
            terminology,
            code,
            query,
            offset,
            limit,
            ascending,
            sort,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_or_uri_label is not None:
            _path_params['idOrUriLabel'] = id_or_uri_label
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        if query is not None:
            _query_params.append(('query', query))

        if offset is not None:
            _query_params.append(('offset', offset))

        if limit is not None:
            _query_params.append(('limit', limit))

        if ascending is not None:
            _query_params.append(('ascending', ascending))

        if sort is not None:
            _query_params.append(('sort', sort))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/{idOrUriLabel}/concept/{terminology}/{code}/relationships',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def find_tree_position_children(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            query: Annotated[Optional[StrictStr], Field(
                description="Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)")] = None,
            offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
            limit: Annotated[Optional[StrictInt], Field(
                description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
            ascending: Annotated[Optional[StrictBool], Field(
                description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
            sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResultListConceptTreePosition:
        """Find concept tree position children by terminology and code

        Finds concept tree position children for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param query: Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._find_tree_position_children_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            query=query,
            offset=offset,
            limit=limit,
            ascending=ascending,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "ResultListConceptTreePosition",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def find_tree_position_children_with_http_info(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            query: Annotated[Optional[StrictStr], Field(
                description="Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)")] = None,
            offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
            limit: Annotated[Optional[StrictInt], Field(
                description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
            ascending: Annotated[Optional[StrictBool], Field(
                description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
            sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResultListConceptTreePosition]:
        """Find concept tree position children by terminology and code

        Finds concept tree position children for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param query: Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._find_tree_position_children_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            query=query,
            offset=offset,
            limit=limit,
            ascending=ascending,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "ResultListConceptTreePosition",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def find_tree_position_children_without_preload_content(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            query: Annotated[Optional[StrictStr], Field(
                description="Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)")] = None,
            offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
            limit: Annotated[Optional[StrictInt], Field(
                description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
            ascending: Annotated[Optional[StrictBool], Field(
                description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
            sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find concept tree position children by terminology and code

        Finds concept tree position children for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param query: Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._find_tree_position_children_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            query=query,
            offset=offset,
            limit=limit,
            ascending=ascending,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "ResultListConceptTreePosition",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _find_tree_position_children_serialize(
            self,
            id_or_uri_label,
            terminology,
            code,
            query,
            offset,
            limit,
            ascending,
            sort,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_or_uri_label is not None:
            _path_params['idOrUriLabel'] = id_or_uri_label
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        if query is not None:
            _query_params.append(('query', query))

        if offset is not None:
            _query_params.append(('offset', offset))

        if limit is not None:
            _query_params.append(('limit', limit))

        if ascending is not None:
            _query_params.append(('ascending', ascending))

        if sort is not None:
            _query_params.append(('sort', sort))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/{idOrUriLabel}/concept/{terminology}/{code}/trees/children',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def find_tree_positions(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            query: Annotated[Optional[StrictStr], Field(
                description="Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)")] = None,
            offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
            limit: Annotated[Optional[StrictInt], Field(
                description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
            ascending: Annotated[Optional[StrictBool], Field(
                description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
            sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResultListConceptTreePosition:
        """Find concept tree positions by terminology and code

        Finds concept tree positions for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param query: Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._find_tree_positions_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            query=query,
            offset=offset,
            limit=limit,
            ascending=ascending,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "ResultListConceptTreePosition",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def find_tree_positions_with_http_info(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            query: Annotated[Optional[StrictStr], Field(
                description="Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)")] = None,
            offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
            limit: Annotated[Optional[StrictInt], Field(
                description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
            ascending: Annotated[Optional[StrictBool], Field(
                description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
            sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResultListConceptTreePosition]:
        """Find concept tree positions by terminology and code

        Finds concept tree positions for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param query: Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._find_tree_positions_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            query=query,
            offset=offset,
            limit=limit,
            ascending=ascending,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "ResultListConceptTreePosition",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def find_tree_positions_without_preload_content(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            query: Annotated[Optional[StrictStr], Field(
                description="Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)")] = None,
            offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
            limit: Annotated[Optional[StrictInt], Field(
                description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
            ascending: Annotated[Optional[StrictBool], Field(
                description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
            sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find concept tree positions by terminology and code

        Finds concept tree positions for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param query: Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._find_tree_positions_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            query=query,
            offset=offset,
            limit=limit,
            ascending=ascending,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "ResultListConceptTreePosition",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _find_tree_positions_serialize(
            self,
            id_or_uri_label,
            terminology,
            code,
            query,
            offset,
            limit,
            ascending,
            sort,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_or_uri_label is not None:
            _path_params['idOrUriLabel'] = id_or_uri_label
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        if query is not None:
            _query_params.append(('query', query))

        if offset is not None:
            _query_params.append(('offset', offset))

        if limit is not None:
            _query_params.append(('limit', limit))

        if ascending is not None:
            _query_params.append(('ascending', ascending))

        if sort is not None:
            _query_params.append(('sort', sort))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/{idOrUriLabel}/concept/{terminology}/{code}/trees',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_concept(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, axioms, attributes, children, definitions, descendants, highlights, inverseRelationships, mapsets, parents, relationships, semanticTypes, subsets, terms, treePositions<a href='https://github.com/TerminologyHub/termhub-in-5-minutes/blob/main/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Concept:
        """Get concept by terminology and code

        Gets concept for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, axioms, attributes, children, definitions, descendants, highlights, inverseRelationships, mapsets, parents, relationships, semanticTypes, subsets, terms, treePositions<a href='https://github.com/TerminologyHub/termhub-in-5-minutes/blob/main/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_concept_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "Concept",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_concept_with_http_info(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, axioms, attributes, children, definitions, descendants, highlights, inverseRelationships, mapsets, parents, relationships, semanticTypes, subsets, terms, treePositions<a href='https://github.com/TerminologyHub/termhub-in-5-minutes/blob/main/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Concept]:
        """Get concept by terminology and code

        Gets concept for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, axioms, attributes, children, definitions, descendants, highlights, inverseRelationships, mapsets, parents, relationships, semanticTypes, subsets, terms, treePositions<a href='https://github.com/TerminologyHub/termhub-in-5-minutes/blob/main/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_concept_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "Concept",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_concept_without_preload_content(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, axioms, attributes, children, definitions, descendants, highlights, inverseRelationships, mapsets, parents, relationships, semanticTypes, subsets, terms, treePositions<a href='https://github.com/TerminologyHub/termhub-in-5-minutes/blob/main/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get concept by terminology and code

        Gets concept for the specified terminology and code. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, axioms, attributes, children, definitions, descendants, highlights, inverseRelationships, mapsets, parents, relationships, semanticTypes, subsets, terms, treePositions<a href='https://github.com/TerminologyHub/termhub-in-5-minutes/blob/main/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_concept_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "Concept",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_concept_serialize(
            self,
            id_or_uri_label,
            terminology,
            code,
            include,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_or_uri_label is not None:
            _path_params['idOrUriLabel'] = id_or_uri_label
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        if include is not None:
            _query_params.append(('include', include))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/{idOrUriLabel}/concept/{terminology}/{code}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_concept_codes(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            codes: Annotated[StrictStr, Field(
                description="Comma-separated list of terminology codes, e.g. \"1119,1149\" or \"64572001,22298006 \"")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, axioms, attributes, children, definitions, descendants, highlights, inverseRelationships, mapsets, parents, relationships, semanticTypes, subsets, terms, treePositions<a href='https://github.com/TerminologyHub/termhub-in-5-minutes/blob/main/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Concept]:
        """Get concepts by terminology and list of codes

        Gets concepts for the specified terminology and list of codes. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param codes: Comma-separated list of terminology codes, e.g. \"1119,1149\" or \"64572001,22298006 \" (required)
        :type codes: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, axioms, attributes, children, definitions, descendants, highlights, inverseRelationships, mapsets, parents, relationships, semanticTypes, subsets, terms, treePositions<a href='https://github.com/TerminologyHub/termhub-in-5-minutes/blob/main/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_concept_codes_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            codes=codes,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "List[Concept]",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_concept_codes_with_http_info(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            codes: Annotated[StrictStr, Field(
                description="Comma-separated list of terminology codes, e.g. \"1119,1149\" or \"64572001,22298006 \"")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, axioms, attributes, children, definitions, descendants, highlights, inverseRelationships, mapsets, parents, relationships, semanticTypes, subsets, terms, treePositions<a href='https://github.com/TerminologyHub/termhub-in-5-minutes/blob/main/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Concept]]:
        """Get concepts by terminology and list of codes

        Gets concepts for the specified terminology and list of codes. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param codes: Comma-separated list of terminology codes, e.g. \"1119,1149\" or \"64572001,22298006 \" (required)
        :type codes: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, axioms, attributes, children, definitions, descendants, highlights, inverseRelationships, mapsets, parents, relationships, semanticTypes, subsets, terms, treePositions<a href='https://github.com/TerminologyHub/termhub-in-5-minutes/blob/main/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_concept_codes_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            codes=codes,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "List[Concept]",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_concept_codes_without_preload_content(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            codes: Annotated[StrictStr, Field(
                description="Comma-separated list of terminology codes, e.g. \"1119,1149\" or \"64572001,22298006 \"")],
            include: Annotated[Optional[StrictStr], Field(
                description="Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, axioms, attributes, children, definitions, descendants, highlights, inverseRelationships, mapsets, parents, relationships, semanticTypes, subsets, terms, treePositions<a href='https://github.com/TerminologyHub/termhub-in-5-minutes/blob/main/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get concepts by terminology and list of codes

        Gets concepts for the specified terminology and list of codes. This call will not work for projects hosting multiple versions of the same terminology.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param codes: Comma-separated list of terminology codes, e.g. \"1119,1149\" or \"64572001,22298006 \" (required)
        :type codes: str
        :param include: Indicator of how much data to return. Comma-separated list of any of the following values: minimal, summary, full, axioms, attributes, children, definitions, descendants, highlights, inverseRelationships, mapsets, parents, relationships, semanticTypes, subsets, terms, treePositions<a href='https://github.com/TerminologyHub/termhub-in-5-minutes/blob/main/doc/INCLUDE.md' target='_blank'>See here for detailed information</a>.
        :type include: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_concept_codes_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            codes=codes,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "List[Concept]",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_concept_codes_serialize(
            self,
            id_or_uri_label,
            terminology,
            codes,
            include,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_or_uri_label is not None:
            _path_params['idOrUriLabel'] = id_or_uri_label
        if terminology is not None:
            _path_params['terminology'] = terminology
        # process the query parameters
        if codes is not None:
            _query_params.append(('codes', codes))

        if include is not None:
            _query_params.append(('include', include))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/{idOrUriLabel}/concept/{terminology}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )

    @validate_call
    def get_concept_diagram(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get concept diagram by terminology and code

        Gets concept diagram for the specified terminology and code.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_concept_diagram_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '417': None,
            '403': None,
            '200': None,
            '500': None,
            '401': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_concept_diagram_with_http_info(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get concept diagram by terminology and code

        Gets concept diagram for the specified terminology and code.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_concept_diagram_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '417': None,
            '403': None,
            '200': None,
            '500': None,
            '401': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_concept_diagram_without_preload_content(
            self,
            id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel, e.g. \"sandbox\"")],
            terminology: Annotated[
                StrictStr, Field(description="Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\".")],
            code: Annotated[
                StrictStr, Field(description="Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\"")],
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get concept diagram by terminology and code

        Gets concept diagram for the specified terminology and code.

        :param id_or_uri_label: Project id or uriLabel, e.g. \"sandbox\" (required)
        :type id_or_uri_label: str
        :param terminology: Terminology id or abbreviation. e.g. \"uuid1\" or \"ICD10CM\". (required)
        :type terminology: str
        :param code: Terminology code, e.g. \"1119\", \"8867-4\", or \"64572001\" (required)
        :type code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_concept_diagram_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            code=code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '417': None,
            '403': None,
            '200': None,
            '500': None,
            '401': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_concept_diagram_serialize(
            self,
            id_or_uri_label,
            terminology,
            code,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_or_uri_label is not None:
            _path_params['idOrUriLabel'] = id_or_uri_label
        if terminology is not None:
            _path_params['terminology'] = terminology
        if code is not None:
            _path_params['code'] = code
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json',
                'image/png'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/{idOrUriLabel}/concept/{terminology}/{code}/diagram',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )
