# coding: utf-8

"""
    Terminology Hub Terminology Terminology API

    API documentation for the interacting with terminologies and concepts. <p>For a guided tour of using this API, see our github project <a href=\"https://github.com/terminologyhub/termhub-in-5-minutes\">https://github.com/terminologyhub/termhub-in-5-minutes</a></p>

    The version of the OpenAPI document: 1.0.0
    Contact: info@terminologyhub.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from models.result_list_term import ResultListTerm

from api_client import ApiClient, RequestSerialized
from api_response import ApiResponse
from rest import RESTResponseType


class TermApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def autocomplete(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel")],
        query: Annotated[StrictStr, Field(description="Search text")],
        terminology: Annotated[Optional[StrictStr], Field(description="Comma-separated list of terminology ids or abbreviations (or null for all terminologies). e.g. \"uuid1,uuid2\", \"SNOMEDCT,RXNORM\", or \"ICD10CM\".")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[str]:
        """Suggest autocompletions for text while searching

        Finds top ten strings matching input query.

        :param id_or_uri_label: Project id or uriLabel (required)
        :type id_or_uri_label: str
        :param query: Search text (required)
        :type query: str
        :param terminology: Comma-separated list of terminology ids or abbreviations (or null for all terminologies). e.g. \"uuid1,uuid2\", \"SNOMEDCT,RXNORM\", or \"ICD10CM\".
        :type terminology: str
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._autocomplete_serialize(
            id_or_uri_label=id_or_uri_label,
            query=query,
            terminology=terminology,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '401': None,
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def autocomplete_with_http_info(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel")],
        query: Annotated[StrictStr, Field(description="Search text")],
        terminology: Annotated[Optional[StrictStr], Field(description="Comma-separated list of terminology ids or abbreviations (or null for all terminologies). e.g. \"uuid1,uuid2\", \"SNOMEDCT,RXNORM\", or \"ICD10CM\".")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[str]]:
        """Suggest autocompletions for text while searching

        Finds top ten strings matching input query.

        :param id_or_uri_label: Project id or uriLabel (required)
        :type id_or_uri_label: str
        :param query: Search text (required)
        :type query: str
        :param terminology: Comma-separated list of terminology ids or abbreviations (or null for all terminologies). e.g. \"uuid1,uuid2\", \"SNOMEDCT,RXNORM\", or \"ICD10CM\".
        :type terminology: str
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._autocomplete_serialize(
            id_or_uri_label=id_or_uri_label,
            query=query,
            terminology=terminology,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '401': None,
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def autocomplete_without_preload_content(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel")],
        query: Annotated[StrictStr, Field(description="Search text")],
        terminology: Annotated[Optional[StrictStr], Field(description="Comma-separated list of terminology ids or abbreviations (or null for all terminologies). e.g. \"uuid1,uuid2\", \"SNOMEDCT,RXNORM\", or \"ICD10CM\".")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Suggest autocompletions for text while searching

        Finds top ten strings matching input query.

        :param id_or_uri_label: Project id or uriLabel (required)
        :type id_or_uri_label: str
        :param query: Search text (required)
        :type query: str
        :param terminology: Comma-separated list of terminology ids or abbreviations (or null for all terminologies). e.g. \"uuid1,uuid2\", \"SNOMEDCT,RXNORM\", or \"ICD10CM\".
        :type terminology: str
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._autocomplete_serialize(
            id_or_uri_label=id_or_uri_label,
            query=query,
            terminology=terminology,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[str]",
            '401': None,
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _autocomplete_serialize(
        self,
        id_or_uri_label,
        query,
        terminology,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_or_uri_label is not None:
            _path_params['idOrUriLabel'] = id_or_uri_label
        # process the query parameters
        if terminology is not None:
            
            _query_params.append(('terminology', terminology))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/{idOrUriLabel}/autocomplete',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_terms(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel")],
        terminology: Annotated[Optional[StrictStr], Field(description="Comma-separated list of terminology ids or abbreviations (or null for all terminologies). e.g. \"uuid1,uuid2\", \"SNOMEDCT,RXNORM\", or \"ICD10CM\".")] = None,
        query: Annotated[Optional[StrictStr], Field(description="Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
        ascending: Annotated[Optional[StrictBool], Field(description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
        active: Annotated[Optional[StrictBool], Field(description="<code>true</code> for active terms only, <code>false</code> for inactive terms only, <code>null</code> for both")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResultListTerm:
        """Find terms across project terminologies

        Finds terms matching specified search criteria.

        :param id_or_uri_label: Project id or uriLabel (required)
        :type id_or_uri_label: str
        :param terminology: Comma-separated list of terminology ids or abbreviations (or null for all terminologies). e.g. \"uuid1,uuid2\", \"SNOMEDCT,RXNORM\", or \"ICD10CM\".
        :type terminology: str
        :param query: Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param active: <code>true</code> for active terms only, <code>false</code> for inactive terms only, <code>null</code> for both
        :type active: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_terms_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            query=query,
            offset=offset,
            limit=limit,
            sort=sort,
            ascending=ascending,
            active=active,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "ResultListTerm",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_terms_with_http_info(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel")],
        terminology: Annotated[Optional[StrictStr], Field(description="Comma-separated list of terminology ids or abbreviations (or null for all terminologies). e.g. \"uuid1,uuid2\", \"SNOMEDCT,RXNORM\", or \"ICD10CM\".")] = None,
        query: Annotated[Optional[StrictStr], Field(description="Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
        ascending: Annotated[Optional[StrictBool], Field(description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
        active: Annotated[Optional[StrictBool], Field(description="<code>true</code> for active terms only, <code>false</code> for inactive terms only, <code>null</code> for both")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResultListTerm]:
        """Find terms across project terminologies

        Finds terms matching specified search criteria.

        :param id_or_uri_label: Project id or uriLabel (required)
        :type id_or_uri_label: str
        :param terminology: Comma-separated list of terminology ids or abbreviations (or null for all terminologies). e.g. \"uuid1,uuid2\", \"SNOMEDCT,RXNORM\", or \"ICD10CM\".
        :type terminology: str
        :param query: Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param active: <code>true</code> for active terms only, <code>false</code> for inactive terms only, <code>null</code> for both
        :type active: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_terms_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            query=query,
            offset=offset,
            limit=limit,
            sort=sort,
            ascending=ascending,
            active=active,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "ResultListTerm",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_terms_without_preload_content(
        self,
        id_or_uri_label: Annotated[StrictStr, Field(description="Project id or uriLabel")],
        terminology: Annotated[Optional[StrictStr], Field(description="Comma-separated list of terminology ids or abbreviations (or null for all terminologies). e.g. \"uuid1,uuid2\", \"SNOMEDCT,RXNORM\", or \"ICD10CM\".")] = None,
        query: Annotated[Optional[StrictStr], Field(description="Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Start index for search results")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Limit of results to return (hard limit of 1000 regardless of value)")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Comma-separated list of fields to sort on")] = None,
        ascending: Annotated[Optional[StrictBool], Field(description="<code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified")] = None,
        active: Annotated[Optional[StrictBool], Field(description="<code>true</code> for active terms only, <code>false</code> for inactive terms only, <code>null</code> for both")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find terms across project terminologies

        Finds terms matching specified search criteria.

        :param id_or_uri_label: Project id or uriLabel (required)
        :type id_or_uri_label: str
        :param terminology: Comma-separated list of terminology ids or abbreviations (or null for all terminologies). e.g. \"uuid1,uuid2\", \"SNOMEDCT,RXNORM\", or \"ICD10CM\".
        :type terminology: str
        :param query: Search text (<a href=\"https://github.com/terminologyhub/termhub-in-5-minutes/blob/master/doc/SEARCH.md\">See here for more info</a>)
        :type query: str
        :param offset: Start index for search results
        :type offset: int
        :param limit: Limit of results to return (hard limit of 1000 regardless of value)
        :type limit: int
        :param sort: Comma-separated list of fields to sort on
        :type sort: str
        :param ascending: <code>true</code> for ascending, <code>false</code> for descending, <code>null</code> for unspecified
        :type ascending: bool
        :param active: <code>true</code> for active terms only, <code>false</code> for inactive terms only, <code>null</code> for both
        :type active: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_terms_serialize(
            id_or_uri_label=id_or_uri_label,
            terminology=terminology,
            query=query,
            offset=offset,
            limit=limit,
            sort=sort,
            ascending=ascending,
            active=active,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '404': None,
            '401': None,
            '200': "ResultListTerm",
            '403': None,
            '417': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_terms_serialize(
        self,
        id_or_uri_label,
        terminology,
        query,
        offset,
        limit,
        sort,
        ascending,
        active,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id_or_uri_label is not None:
            _path_params['idOrUriLabel'] = id_or_uri_label
        # process the query parameters
        if terminology is not None:
            
            _query_params.append(('terminology', terminology))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if ascending is not None:
            
            _query_params.append(('ascending', ascending))
            
        if active is not None:
            
            _query_params.append(('active', active))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/project/{idOrUriLabel}/term',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


