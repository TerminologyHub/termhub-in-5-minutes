# coding: utf-8

"""
    Terminology Hub Terminology Terminology API

    API documentation for the interacting with terminologies and concepts. <p>For a guided tour of using this API, see our github project <a href=\"https://github.com/terminologyhub/termhub-in-5-minutes\">https://github.com/terminologyhub/termhub-in-5-minutes</a></p>

    The version of the OpenAPI document: 1.0.0
    Contact: info@terminologyhub.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from axiom import Axiom
from concept_ref import ConceptRef
from concept_relationship import ConceptRelationship
from concept_tree_position import ConceptTreePosition
from definition import Definition
from term import Term
from typing import Optional, Set
from typing_extensions import Self

class Concept(BaseModel):
    """
    Represents a concept in a terminology
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier")
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Confidence value (for use with search results)")
    modified: Optional[datetime] = Field(default=None, description="Last modified date")
    created: Optional[datetime] = Field(default=None, description="Created date")
    modified_by: Optional[StrictStr] = Field(default=None, description="Last modified by", alias="modifiedBy")
    local: Optional[StrictBool] = Field(default=None, description="Indicates whether this data element is locally created")
    active: Optional[StrictBool] = Field(default=None, description="Indicates whether or not the component is active")
    name: Optional[StrictStr] = Field(default=None, description="Preferred name of the concept")
    code: Optional[StrictStr] = Field(default=None, description="Terminology code, typically representing a unit of meaning")
    terminology: Optional[StrictStr] = Field(default=None, description="Terminology abbreviation, e.g. \"SNOMEDCT\"")
    version: Optional[StrictStr] = Field(default=None, description="Terminology version, e.g. \"20230901\"")
    publisher: Optional[StrictStr] = Field(default=None, description="Terminology publisher, e.g. \"SNOMEDCT\"")
    leaf: Optional[StrictBool] = Field(default=None, description="Indicates whether or not this concept is a leaf node in its hierarchy")
    defined: Optional[StrictBool] = Field(default=None, description="Indicates whether or not this concept has a logical definition with necessary and sufficient conditions")
    terms: Optional[List[Term]] = Field(default=None, description="Terms associated with the concept")
    index_terms: Optional[List[StrictStr]] = Field(default=None, description="Index terms associated with the concept (these exist for searchability but are not strictly content from the publisher)", alias="indexTerms")
    definitions: Optional[List[Definition]] = Field(default=None, description="Textual definitions associated with the concept")
    axioms: Optional[List[Axiom]] = Field(default=None, description="OwL/RDF axioms that express the logical definition")
    attributes: Optional[Dict[str, StrictStr]] = Field(default=None, description="Attribute key/value pairs associated with the concept")
    semantic_types: Optional[List[StrictStr]] = Field(default=None, description="High level semantic types associated with the concept", alias="semanticTypes")
    labels: Optional[List[StrictStr]] = Field(default=None, description="Labels associated with the concept")
    children: Optional[List[ConceptRef]] = Field(default=None, description="Children of the concept in the hierarchy")
    parents: Optional[List[ConceptRef]] = Field(default=None, description="Parents of the concept in the hierarchy")
    descendants: Optional[List[ConceptRef]] = Field(default=None, description="Descendants of the concept in the hierarchy")
    ancestors: Optional[List[ConceptRef]] = Field(default=None, description="Ancestors of the concept in the hierarchy")
    relationships: Optional[List[ConceptRelationship]] = Field(default=None, description="Relationships from this concept to other concepts")
    inverse_relationships: Optional[List[ConceptRelationship]] = Field(default=None, description="Relationships from other concepts to this concept", alias="inverseRelationships")
    tree_positions: Optional[List[ConceptTreePosition]] = Field(default=None, description="Tree positions of the concept in the hierarchy", alias="treePositions")
    __properties: ClassVar[List[str]] = ["id", "confidence", "modified", "created", "modifiedBy", "local", "active", "name", "code", "terminology", "version", "publisher", "leaf", "defined", "terms", "indexTerms", "definitions", "axioms", "attributes", "semanticTypes", "labels", "children", "parents", "descendants", "ancestors", "relationships", "inverseRelationships", "treePositions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Concept from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in terms (list)
        _items = []
        if self.terms:
            for _item in self.terms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['terms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in definitions (list)
        _items = []
        if self.definitions:
            for _item in self.definitions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['definitions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in axioms (list)
        _items = []
        if self.axioms:
            for _item in self.axioms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['axioms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item in self.children:
                if _item:
                    _items.append(_item.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parents (list)
        _items = []
        if self.parents:
            for _item in self.parents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in descendants (list)
        _items = []
        if self.descendants:
            for _item in self.descendants:
                if _item:
                    _items.append(_item.to_dict())
            _dict['descendants'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ancestors (list)
        _items = []
        if self.ancestors:
            for _item in self.ancestors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ancestors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in relationships (list)
        _items = []
        if self.relationships:
            for _item in self.relationships:
                if _item:
                    _items.append(_item.to_dict())
            _dict['relationships'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inverse_relationships (list)
        _items = []
        if self.inverse_relationships:
            for _item in self.inverse_relationships:
                if _item:
                    _items.append(_item.to_dict())
            _dict['inverseRelationships'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tree_positions (list)
        _items = []
        if self.tree_positions:
            for _item in self.tree_positions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['treePositions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Concept from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "confidence": obj.get("confidence"),
            "modified": obj.get("modified"),
            "created": obj.get("created"),
            "modifiedBy": obj.get("modifiedBy"),
            "local": obj.get("local"),
            "active": obj.get("active"),
            "name": obj.get("name"),
            "code": obj.get("code"),
            "terminology": obj.get("terminology"),
            "version": obj.get("version"),
            "publisher": obj.get("publisher"),
            "leaf": obj.get("leaf"),
            "defined": obj.get("defined"),
            "terms": [Term.from_dict(_item) for _item in obj["terms"]] if obj.get("terms") is not None else None,
            "indexTerms": obj.get("indexTerms"),
            "definitions": [Definition.from_dict(_item) for _item in obj["definitions"]] if obj.get("definitions") is not None else None,
            "axioms": [Axiom.from_dict(_item) for _item in obj["axioms"]] if obj.get("axioms") is not None else None,
            "attributes": obj.get("attributes"),
            "semanticTypes": obj.get("semanticTypes"),
            "labels": obj.get("labels"),
            "children": [ConceptRef.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "parents": [ConceptRef.from_dict(_item) for _item in obj["parents"]] if obj.get("parents") is not None else None,
            "descendants": [ConceptRef.from_dict(_item) for _item in obj["descendants"]] if obj.get("descendants") is not None else None,
            "ancestors": [ConceptRef.from_dict(_item) for _item in obj["ancestors"]] if obj.get("ancestors") is not None else None,
            "relationships": [ConceptRelationship.from_dict(_item) for _item in obj["relationships"]] if obj.get("relationships") is not None else None,
            "inverseRelationships": [ConceptRelationship.from_dict(_item) for _item in obj["inverseRelationships"]] if obj.get("inverseRelationships") is not None else None,
            "treePositions": [ConceptTreePosition.from_dict(_item) for _item in obj["treePositions"]] if obj.get("treePositions") is not None else None
        })
        return _obj


